<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- Scans the classpath for annotated components that will be auto-registered
		as Spring beans. By default, the Spring-provided @Component, @Repository,
		@Service, and @Controller stereotypes will be detected. Note: This tag implies
		the effects of the 'annotation-config' tag, activating @Required, @Autowired,
		@PostConstruct, @PreDestroy, @Resource, @PersistenceContext and @PersistenceUnit
		annotations in the component classes, which is usually desired for autodetected
		components (without external configuration). Turn off the 'annotation-config'
		attribute to deactivate this default behavior, for example in order to use
		custom BeanPostProcessor definitions for handling those annotations. -->
	<context:component-scan base-package="com.pax.tms.**.controller">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- Activates various annotations to be detected in bean classes: Spring's
		@Required and @Autowired, as well as JSR 250's @PostConstruct, @PreDestroy
		and @Resource (if available), JAX-WS's @WebServiceRef (if available), EJB3's
		@EJB (if available), and JPA's @PersistenceContext and @PersistenceUnit (if
		available). Alternatively, you may choose to activate the individual BeanPostProcessors
		for those annotations. Note: This tag does not activate processing of Spring's
		@Transactional or EJB3's @TransactionAttribute annotation. Consider the use
		of the <tx:annotation- driven> tag for that purpose. -->
	<context:annotation-config />

	<!-- 开启AOP监听 只对当前配置文件有效 Enables the use of the @AspectJ style of Spring
		AOP. See org.springframework.context.annotation.EnableAspectJAutoProxy Javadoc
		for information on code- based alternatives to this XML element. -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- Configures the annotation-driven Spring MVC Controller programming
		model. Note that, with Spring 3.0, this tag works in Servlet MVC only! -->
	<!-- Attribute : validator The bean name of the Validator that is to be
		used to validate Controller model objects. This attribute is not required,
		and only needs to be specified explicitly if a custom Validator needs to
		be configured. If not specified, JSR-303 validation will be installed if
		a JSR-303 provider is present on the classpath. -->
	<!-- Attribute : conversion-service The bean name of the ConversionService
		that is to be used for type conversion during field binding. This attribute
		is not required, and only needs to be specified explicitly if custom converters
		need to be configured. If not specified, a default FormattingConversionService
		is registered that contains converters to/from standard JDK types. In addition,
		full support for date/time formatting will be installed if the Joda Time
		library is present on the classpath. -->
	<mvc:annotation-driven validator="validator" conversion-service="conversion-service" />

	<!-- This is the central class for javax.validation (JSR-303) setup in a
		Spring application context: It bootstraps a javax.validation.ValidationFactory
		and exposes it through the Spring org.springframework.validation.Validator
		interface as well as through the JSR-303 javax.validation.Validator interface
		and the javax.validation.ValidatorFactory interface itself. -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<property name="validationMessageSource" ref="messageSource" />
	</bean>

	<!-- A factory providing convenient access to a FormattingConversionService
		configured with converters and formatters for common types such as numbers
		and datetimes. Additional converters and formatters can be registered declaratively
		through setConverters(Set) and setFormatters(Set). Another option is to register
		converters and formatters in code by implementing the FormatterRegistrar
		interface. You can then configure provide the set of registrars to use through
		setFormatterRegistrars(Set). -->
	<bean id="conversion-service" class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />


	<!-- MVC INTERCEPTORS -->
	<!-- The ordered set of interceptors that intercept HTTP Servlet Requests
		handled by Controllers. Interceptors allow requests to be pre/post processed
		before/after handling. Each inteceptor must implement the org.springframework.web.servlet.HandlerInterceptor
		or org.springframework.web.context.request.WebRequestInterceptor interface.
		The interceptors in this set are automatically configured on each registered
		HandlerMapping. The URI paths each interceptor applies to are configurable. -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="com.pax.common.web.interceptor.CsrfInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/*/api/**"/>
			<bean class=" com.pax.tms.open.api.interceptor.AppKeyInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>

	<mvc:interceptors>
		<bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
	</mvc:interceptors>



	<!-- Defines a simple Controller that selects a view to render the response. -->
	<mvc:view-controller path="/" view-name="forward:/index" />

	<!-- Configures a handler for serving static resources by forwarding to
		the Servlet container's default Servlet. Use of this handler allows using
		a "/" mapping with the DispatcherServlet while still utilizing the Servlet
		container to serve static resources. This handler will forward all requests
		to the default Servlet. Therefore it is important that it remains last in
		the order of all other URL HandlerMappings. That will be the case if you
		use the "annotation-driven" element or alternatively if you are setting up
		your customized HandlerMapping instance be sure to set its "order" property
		to a value lower than that of the DefaultServletHttpRequestHandler, which
		is Integer.MAX_VALUE. -->
	<mvc:default-servlet-handler />

	<!-- static resource resolvers -->
	<!-- Configures a handler for serving static resources such as images, js,
		and, css files with cache headers optimized for efficient loading in a web
		browser. Allows resources to be served out of any path that is reachable
		via Spring's Resource handling. -->
	<mvc:resources mapping="/static/**" location="/static/" order="0" />

	<!-- view resolvers -->
	<!-- Implementation of ViewResolver that resolves a view based on the request
		file name or Accept header. -->
	<!-- <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"
		p:order="1"> <property name="viewResolvers"> <list> <ref bean="defaultViewResolver"
		/> </list> </property> </bean> -->

	<!-- Convenient subclass of UrlBasedViewResolver that supports InternalResourceView
		(i.e. Servlets and JSPs) and subclasses such as JstlView. The view class
		for all views generated by this resolver can be specified via setViewClass.
		See UrlBasedViewResolver's javadoc for details. The default is InternalResourceView,
		or JstlView if the JSTL API is present. BTW, it's good practice to put JSP
		files that just serve as views under WEB-INF, to hide them from direct access
		(e.g. via a manually entered URL). Only controllers will be able to access
		them then. -->
	<!-- Well-known name -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:order="3">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="contentType" value="text/html" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- Spring MVC View that renders JSON content by serializing the model
		for the current request using Jackson 2's ObjectMapper. By default, the entire
		contents of the model map (with the exception of framework-specific classes)
		will be encoded as JSON. If the model contains only one key, you can have
		it extracted encoded as JSON alone via setExtractValueFromSingleKeyModel.
		The default constructor uses the default configuration provided by Jackson2ObjectMapperBuilder.
		Compatible with Jackson 2.6 and higher, as of Spring 4.3. -->
	<bean id="defaultJsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />

	<!-- An AbstractHandlerMethodAdapter that supports HandlerMethods with their
		method argument and return type signature, as defined via @RequestMapping.
		Support for custom argument and return value types can be added via setCustomArgumentResolvers
		and setCustomReturnValueHandlers. Or alternatively, to re-configure all argument
		and return value types, use setArgumentResolvers and setReturnValueHandlers. -->
	<!-- Well-known name -->
	<bean id="handlerAdapter" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJackson2HttpMessageConverter" />
			</list>
		</property>
	</bean>

	<!-- Implementation of org.springframework.http.converter.HttpMessageConverter
		that can read and write JSON using Jackson 2.x's ObjectMapper. -->
	<bean id="mappingJackson2HttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
				<value>text/json;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- Servlet-based MultipartResolver implementation for Apache Commons FileUpload
		1.2 or above. Provides "maxUploadSize", "maxInMemorySize" and "defaultEncoding"
		settings as bean properties (inherited from CommonsFileUploadSupport). See
		corresponding ServletFileUpload / DiskFileItemFactory properties ("sizeMax",
		"sizeThreshold", "headerEncoding") for details in terms of defaults and accepted
		values. Saves temporary files to the servlet container's temporary directory.
		Needs to be initialized either by an application context or via the constructor
		that takes a ServletContext (for standalone usage). -->
	<!-- Well-known name -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="1000000" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<!-- exception resolvers -->
	<bean id="frameworkHandlerExceptionResolver" class="com.pax.common.web.FrameworkHandlerExceptionResolver"></bean>

	<!-- org.springframework.web.servlet.HandlerExceptionResolver implementation
		that allows for mapping exception class names to view names, either for a
		set of given handlers or for all handlers in the DispatcherServlet. Error
		views are analogous to error page JSPs, but can be used with any kind of
		exception including any checked one, with fine-granular mappings for specific
		handlers. -->
	<!-- <bean id="simpleHandlerExceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings"> <props> <prop key="java.lang.Exception">error</prop>
		</props> </property> </bean> -->

	<!-- i18n -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:ppm/il8n/messages</value>
				<value>classpath:ppm/il8n/phoenix_package</value>
			</list>
		</property>
		<property name="defaultEncoding" value="UTF-8" />
		<property name="cacheSeconds" value="60" />
	</bean>

	<!-- Well-known name -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver" p:cookieName="clientLanguage"
		p:cookieMaxAge="-1" p:cookiePath="/" p:defaultLocale="en" />

</beans>